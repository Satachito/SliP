//	SliP ver 1.0(Swift) 2016 written by Satoru Ogura, Tokyo.
//	This is sample script for SliP.
//
//
//		push 'CALCULATE' button.
//
//

"-------------------------------- String" =

"" =
"ABC" =
"A\tB\"C\nD" =
"ABC" + "DEF" =

"-------------------------------- String <-> Integer" =

[ 65536 16 ] : string =
[ "10000" 16 ] : int =

"-------------------------------- Memory" =

'a = 1 + 2;
'b = 3 + 4;
a + b =


"-------------------------------- Logical" =
//	"T" for true, Nil i.e. '[ ]' for false.

3 == 3 =
3 == 4 =

"A" == "A" =

"A" == "B" =


"-------------------------------- If else" =

3 == 3 ? [ "TRUE" "FALSE" ] =
3 == 4 ? [ "TRUE" "FALSE" ] =

"-------------------------------- List" =
[ a b ] =
'[ a b ] =
'( a b ) =
'{ a b } =
[ a b c ]:# =


"-------------------------------- Primitives" =
"---------------- Stack Top" =
3:'(@) =
3:'@ =
//	3:@ =	//	Stack underflow

3:'(@==3) =

'{}:'(@==[]) =
'{}:'(@=={}) =

//	Stack to List
3:'(@@:.);

"-------------------------------- Function" =

'add1 = '( @ + 1 );
3 : add1 =
//	'3 : add1' means push 3 to stack and evaluate function associated with name 'add1'.
//	@ is stack top.

'factorial = '(
	@ == 1 ? [ 1 ( @ × ( @ - 1 ):factorial ) ]
);
4 : factorial =

'sigma = '(
	@ == 0 ? [ 0 ( @ + ( @ - 1 ):sigma ) ]
);
4 : sigma =

'fibonacci = '(
	@ == 0 ?
	[	0
		(	@ == 1 ?
			[	1
				( ( @ - 1 ):fibonacci + ( @ - 2 ):fibonacci )
			]
		)
	]
);
0:fibonacci =
1:fibonacci =
2:fibonacci =
3:fibonacci =
4:fibonacci =
5:fibonacci =
6:fibonacci =
7:fibonacci =
8:fibonacci =
9:fibonacci =
10:fibonacci =

'zero2two = '( @ < 2 ? [ @ 2 ] );
0:zero2two =
1:zero2two =
2:zero2two =
3:zero2two =

'fib2 = '(
	[	0
		1
		( ( @ - 1 ):fib2 + ( @ - 2 ):fib2 )
	]:(@:zero2two):!
);
0:fib2 =
1:fib2 =
2:fib2 =
3:fib2 =
4:fib2 =
5:fib2 =
6:fib2 =
7:fib2 =
8:fib2 =
9:fib2 =
10:fib2 =

"-------------------------------- List" =

[ "A" "B" "C" ] + [ "D" "E" "F" ] =
//	Lisp's CAR
[ "A" "B" "C" ]:0 =
[ "A" "B" "C" ]:1 =
[ "A" "B" "C" ]:$ =
[ "A" "B" "C" ]:# =
//	Lisp's CDR
[ "A" "B" "C" ]:* =

//	Lisp's CONS
"A", [ "B" "C" ] =

"-------------------------------- Procedure" =
{	( 'a = 1 + 2 )
	( 'b = 3 + 4 )
	( a + b )
} =

"-------------------------------- Function 2" =

'gcd = '(
	@:1 == 0 ? [
		( @:0 )
		( { ( @:1 ) ( @:0 % @:1 ) }:gcd )
	]
);
[ 1071 1029 ]:gcd =

'reduce = '(
	@:0:# == 1 ? [
		(@:0:0)
		( { (@:0:0) ( { (@:0:*) (@:1) }:reduce ) }:(@:1) )
	]
);
[ [ 1 2 3 4 ]( @:0 + @:1 ) ]:reduce =
[ [ 1 2 3 4 ]( @:0 × @:1 ) ]:reduce =


"-------------------------------- Print" =

"This string goes to lower right text view.\n" : .;
"This string also goes to lower right text view.\n" : .;


"-------------------------------- Parallel evaluation" =

«	( 'a = 4 )
	( 'a = 5 )
	( 'a = 6 )
»:¦;
a =


"-------------------------------- Members" =

"A" ∈ [ "A" "B" "C" ] =
"D" ∈ [ "A" "B" "C" ] =
[ "A" "B" "C" ] ∋ "A" =
[ "A" "B" "C" ] ∋ "D" =


"-------------------------------- Comprehensive" =

'hanoi = '{
	( 'n	= @:0 )
	( 'from	= @:1 )
	( 'to	= @:2 )
	( 'via	= @:3 )
	(	n == 1
	?	[	( ( "From " + from:· + " To " + to:· ):¦ )
			{	( { ( n - 1 ) from via to }:hanoi )
				( ( "From " + from:· + " To " + to:· ):¦ )
				( { ( n - 1 ) via to from }:hanoi )
			}
		]
	)
};
[ 3 "a" "b" "c" ]:hanoi;

"-------------------------------- Dict" =
'cd = {
	( 'a = 3 )
	¤
}:$;

`[ cd a ] =

'a = 3;
'add1 = '( @ + 1 );

¤ =

"{\"b\":\"4\"}" : dict : 'b =

3:( ( "{\"add2\":\"( @ + 2 )\"}" : dict ) : 'add2 ) =

