//	SliP ver 1.0(Swift) 2016 written by Satoru Ogura, Tokyo.
//	This is sample script for SliP.
//
//
//		push 'CALCULATE' button.
//
//

"-------------------------------- String"

""
"ABC"
"A\tB\"C\nD"
"ABC" + "DEF"

"-------------------------------- String <-> Integer"

[ 65536 16 ] : string
[ "10000" 16 ] : int

"-------------------------------- Memory"

'a = 1 + 2
'b = 3 + 4
a + b


"-------------------------------- Logical"
//	"T" for true, Nil i.e. '[ ]' for false.

3 == 3
3 == 4

"A" == "A"

"A" == "B"


"-------------------------------- If else"

3 == 3 ? [ "TRUE" "FALSE" ]
3 == 4 ? [ "TRUE" "FALSE" ]

"-------------------------------- List"
[ a b ]
'[ a b ]
'( a b )
'{ a b }
[ a b c ]:#


"-------------------------------- Primitives"
"---------------- Stack Top"
3:'(@)
3:'@
//	3:@ =	//	Stack underflow

3:'(@==3)

'{}:'(@==[])
'{}:'(@=={})

"-------------------------------- Function"

'add1 = '( @ + 1 )
3 : add1
//	'3 : add1' means push 3 to stack and evaluate function associated with name 'add1'.
//	@ is stack top.

'factorial = '( @ == 1 ? [ 1 ( @ × ( @ - 1 ):factorial ) ] )
4 : factorial

'sigma = '( @ == 0 ? [ 0 ( @ + ( @ - 1 ):sigma ) ] )
4 : sigma

"-------------------------------- List"

[ "A" "B" "C" ] + [ "D" "E" "F" ]
//	Lisp's CAR
[ "A" "B" "C" ]:0
[ "A" "B" "C" ]:1
[ "A" "B" "C" ]:$
[ "A" "B" "C" ]:#
//	Lisp's CDR
[ "A" "B" "C" ]:*

//	Lisp's CONS
"A", [ "B" "C" ]

"-------------------------------- Members"

"A" ∈ [ "A" "B" "C" ]
"D" ∈ [ "A" "B" "C" ]
[ "A" "B" "C" ] ∋ "A"
[ "A" "B" "C" ] ∋ "D"

"-------------------------------- Builtins"
		//	Show all
·

